{"version":3,"sources":["components/\bChessman.js","components/Square.js","calculateWinner.js","components/Board.js","index.js"],"names":["ChessmanItem","styled","div","props","$color","Chessman","color","SquareComponent","Square","value","onClick","completeIndexArr","indexOfAllPoints","indexOfsingleLineOfPoints","pointerY","currentX","currentY","push","generateAllLeftToRightIndexArr","pointerX","generateAllTopToBottomIndexArr","generateAllULtoLRIndexArr","generateAllURtoLLIndexArr","isFiveContinuousChessmanIdentical","arr","i","length","subArr","subSetArr","Set","calculateWinner","squares","chessmanArr","subIndexArr","coordination","result","SquareWrapper","BoardOutlne","BoardGrid","Background","Status","span","ControlPanel","GameoverBanner","$winner","Board","useState","Array","fill","BoardInfo","setBoardInfo","blackIsNext","useRef","useEffect","setWinner","winner","status","current","$status","icon","faRetweet","size","map","boardRow","rowIndex","boardCol","colIndex","key","x","y","JSON","parse","stringify","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0cd26b58.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst ChessmanItem = styled.div`\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  border: 1px solid black;\n  box-shadow: 0px 2px 2px 2px rgba(0, 0, 0, 0.12);\n  ${ (props) =>\n    (props.$color === 'white' && `background-color: white`) ||\n    (props.$color === 'black' && `background-color: #111110`) ||\n    `display: none`\n  }\n`\n\nexport default function Chessman({color}) {\n  return <>\n    <ChessmanItem $color={color}/>\n  </>\n}\n","import React from \"react\";\nimport styled from \"styled-components\"\nimport Chessman from './\bChessman';\n\nconst SquareComponent = styled.div`\n  width: 48px;\n  height: 48px;\n  border: 1px solid transparent;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 0;\n  border-radius: 50%;\n  transition: .4s;\n  &:hover{\n    background-color: rgba(0, 0, 0, 0.12);\n  }\n`\nfunction Square({value, onClick}) {\n  return <>\n    <SquareComponent onClick={onClick}>\n      <Chessman color={value} />\n    </SquareComponent>\n  </>\n\n}\n\nexport default Square ","const generateAllURtoLLIndexArr = () => {\n  let indexOfAllPoints = []\n  let indexOfsingleLineOfPoints = []\n\n  for (let pointerX = 4; pointerX <= 18; pointerX ++) {\n    let currentX = pointerX\n    let currentY = 0\n    while (currentX >= 0) {\n      indexOfsingleLineOfPoints.push([currentX, currentY])\n      currentX -- \n      currentY ++\n    }\n    indexOfAllPoints.push(indexOfsingleLineOfPoints)\n    indexOfsingleLineOfPoints = []\n  }\n  for (let pointerY = 1; pointerY <= 14; pointerY ++) {\n    let currentX = 18\n    let currentY = pointerY\n    while (currentY <= 18) {\n      indexOfsingleLineOfPoints.push([currentX, currentY])\n      currentX -- \n      currentY ++\n    }\n    indexOfAllPoints.push(indexOfsingleLineOfPoints)\n    indexOfsingleLineOfPoints = []\n  }\n\n  return indexOfAllPoints\n}\n\nconst generateAllULtoLRIndexArr = () => {\n  let indexOfAllPoints = []\n  let indexOfsingleLineOfPoints = []\n\n  for (let pointerX = 14; pointerX >= 0; pointerX --) {\n    let currentX = pointerX\n    let currentY = 0\n    while (currentX <= 18) {\n      indexOfsingleLineOfPoints.push([currentX, currentY])\n      currentX ++\n      currentY ++\n    }\n    indexOfAllPoints.push(indexOfsingleLineOfPoints)\n    indexOfsingleLineOfPoints = []\n  }\n  for (let pointerY = 1; pointerY <= 14; pointerY ++) {\n    let currentX = 0\n    let currentY = pointerY\n    while (currentY <= 18) {\n      indexOfsingleLineOfPoints.push([currentX, currentY])\n      currentX ++\n      currentY ++\n    }\n    indexOfAllPoints.push(indexOfsingleLineOfPoints)\n    indexOfsingleLineOfPoints = []\n  }\n\n  return indexOfAllPoints\n}\n\nconst generateAllTopToBottomIndexArr = () => {\n  let indexOfAllPoints = []\n  let indexOfsingleLineOfPoints = []\n\n  for (let pointerX = 0; pointerX <= 18; pointerX ++) {\n    let currentX = pointerX\n    let currentY = 0\n    while (currentY <= 18) {\n      indexOfsingleLineOfPoints.push([currentX, currentY])\n      currentY ++\n    }\n    indexOfAllPoints.push(indexOfsingleLineOfPoints)\n    indexOfsingleLineOfPoints = []\n  }\n\n  return indexOfAllPoints\n}\n\n\nconst generateAllLeftToRightIndexArr = () => {\n  let indexOfAllPoints = []\n  let indexOfsingleLineOfPoints = []\n\n  for (let pointerY = 0; pointerY <= 18; pointerY ++) {\n    let currentX = 0\n    let currentY = pointerY\n    while (currentX <= 18) {\n      indexOfsingleLineOfPoints.push([currentX, currentY])\n      currentX ++\n    }\n    indexOfAllPoints.push(indexOfsingleLineOfPoints)\n    indexOfsingleLineOfPoints = []\n  }\n\n  return indexOfAllPoints\n}\n\nconst completeIndexArr = [...generateAllLeftToRightIndexArr(), ...generateAllTopToBottomIndexArr(),\n                          ...generateAllULtoLRIndexArr(), ...generateAllURtoLLIndexArr()]\n\nconst isFiveContinuousChessmanIdentical = (arr) => {\n  for (let i = 0; i < arr.length; i ++) {\n    let subArr = [arr[i], arr[i+1], arr[i+2], arr[i+3], arr[i+4]]\n    let subSetArr = [...new Set(subArr)]\n    if ((subSetArr.length === 1) && (subSetArr[0] !== null)) return subSetArr[0]\n  }\n  return false\n}\n\nexport default function calculateWinner(squares) {\n  let chessmanArr = []\n  for (let subIndexArr of completeIndexArr) {\n    for (let coordination of subIndexArr) {\n      chessmanArr.push(squares[coordination[0]][coordination[1]])\n    }\n    let result = isFiveContinuousChessmanIdentical(chessmanArr)\n    if (result) return result\n    chessmanArr = []\n  }\n  return false\n}\n","import { useState, useRef, useEffect } from 'react'\nimport styled from 'styled-components';\nimport Square from './Square';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faRetweet } from '@fortawesome/free-solid-svg-icons'\nimport calculateWinner from '../calculateWinner';\n\nconst SquareWrapper = styled.div`\n  width: 950px;\n  display: grid;\n  grid-template-rows: repeat(19, 1fr);\n  grid-template-columns: repeat(19, 1fr);\n  gap: 0px;\n  margin: 0 auto\n`\n\nconst BoardOutlne = styled.div`\n  width: 1000px;\n  height: 1000px;\n  border: 3px solid black;\n  background-color: #eaae5a;\n  box-shadow: 0px 3px 4px 0px rgba(0, 0, 0.2);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 20px auto;\n  position: relative;\n`\nconst BoardGrid = styled.div`\n    width: 910px;\n    height: 910px;\n    background-size: 50.5px 50.5px;\n    background-image:\n    linear-gradient(to right, black 1px, transparent 0px),\n    linear-gradient(to bottom, black 1px, transparent 0px);\n    position: absolute;\n    top: 48px;\n    left: 48px\n\n`\nconst Background = styled.div`\n  background-color: #878847;\n  overflow: auto;\n`\nconst Status = styled.span`\n  font-size: 30px;\n  font-weight: bold;\n  text-align: center;\n  font-style: italic;\n`\nconst ControlPanel = styled.div`\n  width: 950px;\n  display: flex;\n  margin: 20px auto;\n  justify-content: space-between;\n  align-items: center;\n`\nconst GameoverBanner = styled.div`\n  width: 100%;\n  height: 0px;\n  font-size: 50px;\n  color: white;\n  text-align: center;\n  line-height: 200px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: rgba(0, 0, 0, 0.3);\n  z-index: 2;\n  overflow: hidden;\n  transition: 0.8s linear;\n  ${props => {\n    if (props.$winner) return `height: 200px`\n  }}\n`\n\nfunction Board() {\n  const [BoardInfo, setBoardInfo] = useState({\n    squares: Array(19).fill(Array(19).fill(null)),\n  })\n\n  const blackIsNext = useRef(true)\n\n  useEffect(() => {\n    calculateWinner(BoardInfo.squares)\n    setWinner(calculateWinner(BoardInfo.squares))\n  }, [BoardInfo])\n\n  const [winner, setWinner] = useState(null)\n\n  const handleClick = (x, y) => {\n    const squares = JSON.parse(JSON.stringify(BoardInfo.squares))\n    if (!(squares[x][y] === null) || winner) return\n    squares[x][y] = blackIsNext.current ? 'black' : 'white';\n    setBoardInfo({\n      squares: squares\n    });\n    blackIsNext.current = !blackIsNext.current\n  }\n\n  const handleRestartGame = () => {\n    setBoardInfo({\n      squares: Array(19).fill(Array(19).fill(null))\n    })\n  }\n\n  let status = 'Next player: ' + (blackIsNext.current ? 'black' : 'white');\n  return <>\n    <Background>\n    <GameoverBanner $winner={winner}> Game Over  the Winner is {winner} </GameoverBanner>\n    <ControlPanel>\n      <Status $status={status}> {status} </Status>\n      <FontAwesomeIcon icon={faRetweet} size=\"3x\" onClick={handleRestartGame}/>\n    </ControlPanel>\n      <BoardOutlne>\n        <BoardGrid />\n        <SquareWrapper>\n          {\n            BoardInfo.squares.map((boardRow, rowIndex) => {\n              return boardRow.map((boardCol, colIndex) => {\n                let key = (rowIndex * 19) + colIndex\n                return <Square\n                          key={key}\n                          value={BoardInfo.squares[rowIndex][colIndex]}\n                          onClick={() => handleClick(rowIndex, colIndex)}\n                      />\n              })\n            })\n          }\n        </SquareWrapper>\n      </BoardOutlne>\n    </Background>\n  </>\n}\n\nexport default Board\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Board from \"./components/Board\"\n\nReactDOM.render(\n  <Board />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}